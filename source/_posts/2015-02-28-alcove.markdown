---
layout: post
title: "Introducing Alcove"
date: 2015-02-28 09:52
comments: true
categories: ios code-coverage unit-testing xcode objective-c
---
I have been spending quite a bit of time working with Xcode Server for continuous integration of a fairly large iOS project.  As part of the build process, I wanted to generate a test coverage report and place it in on the web server running on our build server.  I investigated several existing tools that are capable of generating reports, but found things about each that I disliked.  [Frankencover](http://frankencover.it) is a good solution, but it requires installing the JDK, which is not a normal part of the iOS development stack.  [XcodeCoverage](https://github.com/jonreid/XcodeCoverage) was another option that I investigated, but it required some executable files that I didn't want to store in our repository.  Dissatisfied with the existing options, I decided that a simple Ruby script could do the job and set out to write my first gem.

# Alcove
[Alcove](https://github.com/ioveracker/alcove) is a simple gem that can quickly and reliably generate a code coverage report for an iOS project.  Installation is simple, since it's a gem.

{% codeblock Terminal %}
gem install alcove
{% endcodeblock %}

That's it.  (You'll also need to install lcov, either with Homebrew or MacPorts.)

To generate a report, you just need to give alcove your `${PRODUCT_NAME}` and it will do the rest.

{% codeblock Terminal %}
alcove --product-name YourProductName
{% endcodeblock %}

After crunching some files, the report will be ready to view in ./alcove-report/.

{% img https://camo.githubusercontent.com/465d99ff53adad12faf5f51802b51e12cba4d074/687474703a2f2f692e696d6775722e636f6d2f344464496374712e706e673f31 %}

Check out the [README](https://github.com/ioveracker/Alcove/blob/master/README.md) for more information (be sure to check out the options), or the [demo project](https://github.com/ioveracker/AlcoveDemo) to see it in action.