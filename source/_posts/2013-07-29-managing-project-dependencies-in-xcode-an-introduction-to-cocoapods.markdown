---
layout: post
title: "Managing Project Dependencies in Xcode: An Introduction to CocoaPods"
date: 2013-07-29 00:00
comments: true
categories: Xcode cocoatouch iOS OSX dependency-management
---
The open-source community for iOS is amazing.  There are so many high-quality, incredibly useful open-source projects out there now that it would be crazy to work on an iOS project without bringing in at least a few open-source projects.  However, manually managing each of the libraries that you bring in can be tedious at best.  Most of them are hosted on [GitHub](http://github.com), which has improved a lot in the last few years to streamline the process.  With [GitHub for Mac](http://mac.github.com), it's easy to quickly clone a project straight from your browser, but you still have to move the appropriate files into *your* Xcode project.  And then you have to do it all again when the project is updated and you want to take advantage of the latest release.

It doesn't have to be this way.

#CocoaPods
[CocoaPods](http://cocoapods.org) is the best way to manage library dependencies with Xcode.  It's still in the alpha phase, but it's continually being improved.  With CocoaPods, you can easily manage your project dependencies, even specifying the specific version number for each.  This is all tracked in a plaintext file, so you can keep this in your source repository and your whole team will automatically be in sync.  As an added bonus, you won't have to keep the projects in your source repository, so you can keep your repository's footprint small.

#Installation
CocoaPods is distributed as a [Ruby](http://ruby-lang.org) gem.  If you're new to Ruby, you should consider using an environment manager like [rbenv](http://www.overacker.me/blog/2013/07/10/getting-started-with-rbenv/) to keep track of your Ruby environments.  It's not just for [Rails](http://rubyonrails.org/)--more and more command line tools are being written in Ruby, and they often have specific Ruby version requirements.  I wrote a [simple guide](http://www.overacker.me/blog/2013/07/10/getting-started-with-rbenv/) to getting started with rbenv that will have you up and running in no time.

If you don't have it already, install Ruby 2.0.0-p247.  CocoaPods will work in older versions, but I wouldn't go older than 1.9.3.  It's distributed as a gem, so installing is simple.

{% codeblock Terminal %}
gem install cocoapods
{% endcodeblock %}

This will download and install CocoaPods and its dependencies.  (Don't forget to [rehash](https://github.com/sstephenson/rbenv#rbenv-rehash) if you're using rbenv.)

Now, perform the initial setup, which will create ~/.cocoapods, setup the initial podspec repos, [and more](https://github.com/CocoaPods/CocoaPods/blob/master/lib/cocoapods/command/setup.rb).

{% codeblock Terminal %}
pod setup
{% endcodeblock %}

Installation is that simple.  You're ready to get started.

#Podfile

Dependencies are tracked in a special plaintext file named Podfile.  You should create this file in the same directory as your Xcode project.  The first line of this file tells CocoaPods what platform your project is targeting (iOS or OS X), and the subsequent lines list the dependencies for your project.

E.g., a very simple iOS Podfile specifying the latest JSONKit and Reachability frameworks:

{% codeblock Podfile %}
platform :iOS
pod 'LastFm'
pod 'TestFlightSDK'
{% endcodeblock %}

If you want to specify the version for a pod, simply append the version number like so:

{% codeblock Podfile %}
platform :iOS
pod 'LastFm'
pod 'TestFlightSDK', '1.2.6'
{% endcodeblock %}

You can also prefix the version number with a [version constraint](http://docs.rubygems.org/read/chapter/16#page74) to indicate a range of versions.

{% codeblock Podfile %}
platform :iOS
pod 'LastFm'
pod 'TestFlightSDK', '~> 1.2'
{% endcodeblock %}

Finding the pods you need for your project is simple thanks to the search function on the [CocoaPods site](http://cocoapods.org/).

#Workspace Generation
Once your Podfile has been defined, the next step is to install the pods and generate the Xcode workspace.  This, too, is quite simple.  In the same directory as your Podfile, run the following command.

{% codeblock Terminal %}
pod install
{% endcodeblock %}

This will download the pods and build a Xcode workspace that includes a Pods target in addition to your Xcode project.  Note that you need to use the .xcworkspace file generated by CocoaPods from now on when working with your project.

{% codeblock Terminal %}
open YourProject.xcworkspace
{% endcodeblock %}

Whenever you add a new pod to your Podfile, just run `pod install` again to regenerate the workspace.
#Source Control
I like to keep the pods out of my source code repositories.  You can update the ignore file for your source control repository to exclude the Pods/ directory created by CocoaPods.

{% codeblock .gitignore or .hgignore %}
Pods/
{% endcodeblock %}

I like to keep the `Podfile` and `Podfile.lock` files in source control so that it's easy to recreate the workspace using `pod install` after cloning the repository.

#More Info
This is just the beginning of what CocoaPods can do.  Explore more of the advanced features--such as specifying pods for certain targets--in the [CocoaPods documentation](http://docs.cocoapods.org/).