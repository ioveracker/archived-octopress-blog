<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode | Isaac Overacker]]></title>
  <link href="http://www.overacker.me/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://www.overacker.me/"/>
  <updated>2015-02-28T10:29:44-08:00</updated>
  <id>http://www.overacker.me/</id>
  <author>
    <name><![CDATA[Isaac Overacker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Alcove]]></title>
    <link href="http://www.overacker.me/blog/2015/02/28/alcove/"/>
    <updated>2015-02-28T09:52:00-08:00</updated>
    <id>http://www.overacker.me/blog/2015/02/28/alcove</id>
    <content type="html"><![CDATA[<p>I have been spending quite a bit of time working with Xcode Server for continuous integration of a fairly large iOS project.  As part of the build process, I wanted to generate a test coverage report and place it in on the web server running on our build server.  I investigated several existing tools that are capable of generating reports, but found things about each that I disliked.  <a href="http://frankencover.it">Frankencover</a> is a good solution, but it requires installing the JDK, which is not a normal part of the iOS development stack.  <a href="https://github.com/jonreid/XcodeCoverage">XcodeCoverage</a> was another option that I investigated, but it required some executable files that I didn&rsquo;t want to store in our repository.  Dissatisfied with the existing options, I decided that a simple Ruby script could do the job and set out to write my first gem.</p>

<h1>Alcove</h1>

<p><a href="https://github.com/ioveracker/alcove">Alcove</a> is a simple gem that can quickly and reliably generate a code coverage report for an iOS project.  Installation is simple, since it&rsquo;s a gem.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install alcove</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That&rsquo;s it.  (You&rsquo;ll also need to install lcov, either with Homebrew or MacPorts.)</p>

<p>To generate a report, you just need to give alcove your <code>${PRODUCT_NAME}</code> and it will do the rest.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alcove &mdash;product-name YourProductName</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After crunching some files, the report will be ready to view in ./alcove-report/.</p>

<p><img class="<a" src="href="https://camo.githubusercontent.com/465d99ff53adad12faf5f51802b51e12cba4d074/687474703a2f2f692e696d6775722e636f6d2f344464496374712e706e673f31">https://camo.githubusercontent.com/465d99ff53adad12faf5f51802b51e12cba4d074/687474703a2f2f692e696d6775722e636f6d2f344464496374712e706e673f31</a>"></p>

<p>Check out the <a href="https://github.com/ioveracker/Alcove/blob/master/README.md">README</a> for more information (be sure to check out the options), or the <a href="https://github.com/ioveracker/AlcoveDemo">demo project</a> to see it in action.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an Xcode Plugin: A Quick-Start Guide]]></title>
    <link href="http://www.overacker.me/blog/2015/01/25/creating-an-xcode-plugin/"/>
    <updated>2015-01-25T14:19:00-08:00</updated>
    <id>http://www.overacker.me/blog/2015/01/25/creating-an-xcode-plugin</id>
    <content type="html"><![CDATA[<p>Xcode has a rich ecosystem of third-party plugins, exposed and cataloged by the wonderful <em>Xcode plugin</em> <a href="http://alcatraz.io/">Alcatraz</a>.  Some of my favorites: <a href="https://github.com/lucholaf/Auto-Importer-for-Xcode">Auto-Importer</a>, <a href="https://github.com/neonichu/BBUFullIssueNavigator">BBUFullIssueNavigator</a>, and <a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">FuzzyAutocomplete</a>.</p>

<p>However extensive the Xcode plugin catalog may be, there are surely other useful plugins to be written.  The process of writing a plugin is not very well documented, and frustratingly, much of the code required to interact with Xcode is still private.  However, thanks to the efforts of a few clever developers, getting started is much easier than it used to be.  Read on for a quick-start guide to creating an Xcode (5+) plugin.</p>

<!-- more -->


<h2>Prerequisites</h2>

<p>First, if you haven&rsquo;t already installed <a href="http://alcatraz.io/">Alcatraz</a>, do so now.  Once Alcatraz is installed and ready to use, install the Xcode Plugin template.</p>

<p><img class="<a" src="href="http://imgur.com/NAvepMc.png">http://imgur.com/NAvepMc.png</a>"></p>

<p>Once the Xcode Plugin template has been installed, create a new project and select the Xcode Plugin OS X template.  As much fun as it would be to get started, there&rsquo;s one last prerequisite to take care of.</p>

<p>Create a new Podfile (What&rsquo;s that?  Go <a href="../../../../2013/07/29/managing-project-dependencies-in-xcode-an-introduction-to-cocoapods/">here</a> first.) and install the <a href="https://github.com/thurn/DTXcodeUtils">DTXcodeUtils</a> pod.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source &lsquo;&lt;a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git&lt;/a>&rsquo;
</span><span class='line'>platform :osx&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>pod &lsquo;DTXcodeUtils&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After installing the pod, you&rsquo;ll be ready to get started writing your Xcode plugin.</p>

<h2>Creating a Plugin</h2>

<p>Open the workspace generated by Cocoapods, and then open the only .m file, which will be named the same as your project name.  <em>(Note: the build may fail with a linker error.  If this happens, edit your scheme, select Build, and add Pods to the top of <a href="http://i.imgur.com/PCUncdt.png">the list</a>.)</em>  You will see enough boilerplate code to hook your plugin into Xcode and show an alert window when your plugin is used.  I&rsquo;ve included the code sample below with the addition of some code to define a keyboard shortcut for the menu item.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">initWithBundle:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="n">plugin</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Reference to plugin&#39;s bundle, for resource access</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">bundle</span> <span class="o">=</span> <span class="n">plugin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Sample menu item, nested under the &quot;Edit&quot; menu item.</span>
</span><span class='line'>    <span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">menuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSApp</span> <span class="n">mainMenu</span><span class="p">]</span> <span class="nl">itemWithTitle:</span><span class="s">@&quot;Edit&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">menuItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">menuItem</span> <span class="n">submenu</span><span class="p">]</span> <span class="nl">addItem:</span><span class="p">[</span><span class="n">NSMenuItem</span> <span class="n">separatorItem</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">actionMenuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Do Action&quot;</span>
</span><span class='line'>                                                                <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">doMenuAction</span><span class="p">)</span>
</span><span class='line'>                                                         <span class="nl">keyEquivalent:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setTarget:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// Set ⌃⌘X as our plugin&#39;s keyboard shortcut.</span>
</span><span class='line'>        <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setKeyEquivalent:</span><span class="s">@&quot;x&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setKeyEquivalentModifierMask:</span><span class="n">NSControlKeyMask</span> <span class="o">|</span> <span class="n">NSCommandKeyMask</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">menuItem</span> <span class="n">submenu</span><span class="p">]</span> <span class="nl">addItem:</span><span class="n">actionMenuItem</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doMenuAction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSAlert</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAlert</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="nl">setMessageText:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">World</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="n">runModal</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;ll probably want to rename your menu item, change your keyboard shortcut, and rename the <code>doMenuAction</code> method, but other than that, we have a great start on our plugin.  Run the project, and Xcode will bring up a <em>new Xcode window</em> with your plugin installed.  Don&rsquo;t confuse this new Xcode window with the Xcode window you used to launch the process.  Just test your plugin here and then close the window.</p>

<h3>Messing with Xcode</h3>

<p>A plugin that displays an alert is not very useful.  Any good plugin will do something with your code to save you time, and to do that, we need to access the code editor.  This is where the DTXcodeUtils library comes into play.  A simple but useful scenario is to replace the selected text in the code editor, so let&rsquo;s explore how to accomplish that with the methods that DTXcodeUtils exposes.</p>

<p>First, import a few of the useful headers from the DTXcodeUtils project.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">DTXcodeHeaders</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">DTXcodeUtils</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the <code>doMenuAction</code> method, we can now get the selected text from the code editor and replace it with something more&hellip;useful.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doMenuAction</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// This is a reference to the current source code editor.</span>
</span><span class='line'><span class="n">DVTSourceTextView</span> <span class="o">*</span><span class="n">sourceTextView</span> <span class="o">=</span> <span class="p">[</span><span class="n">DTXcodeUtils</span> <span class="n">currentSourceTextView</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Get the range of the selected text within the source code editor.</span>
</span><span class='line'><span class="n">NSRange</span> <span class="n">selectedTextRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">sourceTextView</span> <span class="n">selectedRange</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Get the selected text using the range from above.</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">selectedString</span> <span class="o">=</span> <span class="p">[</span><span class="n">sourceTextView</span><span class="p">.</span><span class="n">textStorage</span><span class="p">.</span><span class="n">string</span> <span class="nl">substringWithRange:</span><span class="n">selectedTextRange</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">selectedString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Replace the selected string with a comment.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">sourceTextView</span> <span class="nl">replaceCharactersInRange:</span><span class="n">selectedTextRange</span> <span class="nl">withString:</span><span class="s">@&quot;// Malkovich Malkovich Malkovich&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, run the project.  In the resulting Xcode window, select some text and run the plugin. (<strong>Warning! This does not use the undo buffer, so be careful.</strong>)  If everything went smoothly, the text you selected should have been replaced with an inane comment.  Completely useless, I suppose, but it does demonstrate how to replace the selected text in the code editor!</p>

<h3>Installation and Removal</h3>

<p>Simply running your project will install the plugin, but if you want to install the plugin manually, you can drop the .xcplugin file in the following directory:</p>

<pre><code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins
</code></pre>

<p>Uninstalling a plug is a simple as removing the .xcplugin file from the above directory.  Once you have a great plugin to share with the world, submit your package to Alcatraz to make it simple for others to install your plugin.</p>

<h3>Sample Project</h3>

<p>The sample code for this post is available on <a href="https://github.com/ioveracker/XcodePluginGuide">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Test Dependencies with CocoaPods]]></title>
    <link href="http://www.overacker.me/blog/2014/09/15/integrating-test-dependencies-with-cocoapods/"/>
    <updated>2014-09-15T13:49:00-07:00</updated>
    <id>http://www.overacker.me/blog/2014/09/15/integrating-test-dependencies-with-cocoapods</id>
    <content type="html"><![CDATA[<p>Most Xcode projects should have some level of test coverage, and any time unit tests are involved it&rsquo;s nice to have a framework for generating mock objects.  However, we don&rsquo;t want to bloat our production app package with these test frameworks, so it&rsquo;s nice to link these libraries only with the test target.  Configuring this properly can be tricky, and the CocoaPods documentation isn&rsquo;t very clear on exactly how to accomplish this in the podfile.</p>

<p>The cleanest solution I&rsquo;ve found to this problem involves specifying the pods for each target individually and using a Ruby function to import the common pods.  Here is a sample podfile that accomplishes this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>platform :ios, &lsquo;7.0&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def import_common_pods
</span><span class='line'>   pod &lsquo;AFNetworking&rsquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>target &lsquo;MyAppTarget&rsquo; do
</span><span class='line'>   import_common_pods
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>target &lsquo;MyAppTestTarget&rsquo; do
</span><span class='line'>   import_common_pods
</span><span class='line'>   pod &lsquo;OCMock&rsquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that you may run into a few issues with this if you&rsquo;re  adding this to an existing project and the previous podfile did not explicitly specify the non-test target.  In that case, you may need to delete the old Pods.xcconfig and libPods.a files then regenerate your workspace with <code>pod install</code>.</p>

<h1>Update</h1>

<p>As of CocoaPods 0.34, there&rsquo;s a cleaner solution built-in:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source &lsquo;&lt;a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git&lt;/a>&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>platform :ios, &lsquo;7.0&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>pod &lsquo;AFNetworking&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>target &ldquo;MyAppTestTarget&rdquo;, :exclusive => true do
</span><span class='line'>   pod &lsquo;OCMock&rsquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Architecture Headaches with CocoaPods]]></title>
    <link href="http://www.overacker.me/blog/2014/08/03/architecture-headaches-with-cocoapods/"/>
    <updated>2014-08-03T18:22:00-07:00</updated>
    <id>http://www.overacker.me/blog/2014/08/03/architecture-headaches-with-cocoapods</id>
    <content type="html"><![CDATA[<p>I recently inherited an iOS project from another developer.  This project was not using CocoaPods for dependency management, so naturally, I converted it to using CocoaPods as soon as I could.  When I first installed the pods, I received this warning in the console:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[!] Found multiple values (&lt;code>armv7&lt;/code>, &lt;code>armv7s&lt;/code>) for the
</span><span class='line'>architectures (&lt;code>ARCHS&lt;/code>) build setting for the &lt;code>Pods&lt;/code>
</span><span class='line'>target definition. Using the first.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It seemed harmless enough, and the project built without problems for the iPhone simulator.  I carried on for a few weeks working on new features, and then I tried to build a version of the app targeting the iOS devices.  Suddenly, I had linker errors.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&ldquo;&lt;em>OBJC_CLASS&lt;/em>$_FBSession&rdquo;, referenced from:
</span><span class='line'>  objc-class-ref in MySourceFile.m
</span><span class='line'>  &hellip;
</span><span class='line'>ld: symbol(s) not found for architecture armv7s</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I looked around for solutions, but of course with linker errors it&rsquo;s can be very difficult to find answers for a particular issue.  Finally, after many hours of searching, reading, and highly scientific trial and error, I decided to look into the multiple architecture warning from CocoaPods, and that&rsquo;s where I found my issue.  In this particular case, the Pods-* targets in my Pods project were targeting armv7 (which is pretty obvious from the CocoaPods warning, but a few weeks had passed), whereas my main app target architectures included both armv7 and armv7s, hence the linker error above.</p>

<p>The solution was to update the target architectures for the app to <code>$(ARCHS_STANDARD_32_BIT)</code> instead of manually specifying both <code>armv7</code> and <code>armv7s</code>.  Then, when running <code>pod install</code>, the <code>$(ARCHS_STANDARD_32_BIT)</code> is set for the Pods-* projects as well and everything is happy.</p>

<p><em>Note: the reason armv7 and armv7s architectures had been specified for the app is that there is a dependency on a library that does not yet support 64-bit architectures.  It looks like <code>$(ARCHS_STANDARD_32_BIT)</code> is a much better way to handle that situation.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming An App on the App Store]]></title>
    <link href="http://www.overacker.me/blog/2013/11/05/app-store-app-rename/"/>
    <updated>2013-11-05T17:38:00-08:00</updated>
    <id>http://www.overacker.me/blog/2013/11/05/app-store-app-rename</id>
    <content type="html"><![CDATA[<p>Renaming an app on the iOS app store is a relatively simple thing to do.  The biggest point of confusion is that you cannot rename your app unless it is in an <em>editable state</em>.  You&rsquo;re probably going to want to change the display name for your app, so the easiest way to put your app in an editable state is to upload a new binary.</p>

<h1>Bundle Identifier</h1>

<p>If you want to rename your Xcode project to reflect the new app name, you won&rsquo;t want your bundle identifier to change along with the project name since this is the unique identifier for your app on the device.  By default, the bundle identifier includes <code>${PRODUCT_NAME}</code> or a variant thereof, e.g. <code>${PRODUCT_NAME:rfc1034identifier}</code>.  You won&rsquo;t want the Bundle Identifier to change when you rename your project, so the first thing you&rsquo;ll want to do is copy your Bundle Identifier from iTunes Connect and paste that in the Bundle Identifier field in the info.plist file for your app.</p>

<h1>Rename Project</h1>

<p>The fastest (and most thorough) way to rename your app is to simply rename the project in Xcode.  Slowly double-click on the project file in Xcode so that the name becomes editable and change the name.  After pressing enter, a dialog will pop up asking if you&rsquo;d like to rename project content items.  You probably want to keep all of these in sync, so choose Rename.</p>

<h1>Upload Binary</h1>

<p>Login to iTunes Connect and create a new version of your app.  When you edit the metadata for the new version of your app, you can now edit the name of the app.  Enter the new name for your app, create your new binary, and upload.  If you make it through the review process, your app will be ready to launch under a new name!  As long as you don&rsquo;t change the Bundle Identifier, existing users will receive the update.</p>
]]></content>
  </entry>
  
</feed>
