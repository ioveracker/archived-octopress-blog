<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Isaac Overacker]]></title>
  <link href="http://www.overacker.me/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://www.overacker.me/"/>
  <updated>2014-08-05T17:44:56-07:00</updated>
  <id>http://www.overacker.me/</id>
  <author>
    <name><![CDATA[Isaac Overacker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Architecture Headaches with CocoaPods]]></title>
    <link href="http://www.overacker.me/blog/2014/08/03/architecture-headaches-with-cocoapods/"/>
    <updated>2014-08-03T18:22:00-07:00</updated>
    <id>http://www.overacker.me/blog/2014/08/03/architecture-headaches-with-cocoapods</id>
    <content type="html"><![CDATA[<p>I recently inherited an iOS project from another developer.  This project was not using CocoaPods for dependency management, so naturally, I converted it to using CocoaPods as soon as I could.  When I first installed the pods, I received this warning in the console:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[!] Found multiple values (&lt;code>armv7&lt;/code>, &lt;code>armv7s&lt;/code>) for the
</span><span class='line'>architectures (&lt;code>ARCHS&lt;/code>) build setting for the &lt;code>Pods&lt;/code>
</span><span class='line'>target definition. Using the first.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It seemed harmless enough, and the project built without problems for the iPhone simulator.  I carried on for a few weeks working on new features, and then I tried to build a version of the app targeting the iOS devices.  Suddenly, I had linker errors.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&ldquo;&lt;em>OBJC_CLASS&lt;/em>$_FBSession&rdquo;, referenced from:
</span><span class='line'>  objc-class-ref in MySourceFile.m
</span><span class='line'>  &hellip;
</span><span class='line'>ld: symbol(s) not found for architecture armv7s</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I looked around for solutions, but of course with linker errors it&rsquo;s can be very difficult to find answers for a particular issue.  Finally, after many hours of searching, reading, and highly scientific trial and error, I decided to look into the multiple architecture warning from CocoaPods, and that&rsquo;s where I found my issue.  In this particular case, the Pods-* targets in my Pods project were targeting armv7 (which is pretty obvious from the CocoaPods warning, but a few weeks had passed), whereas my main app target architectures included both armv7 and armv7s, hence the linker error above.</p>

<p>The solution was to update the target architectures for the app to <code>$(ARCHS_STANDARD_32_BIT)</code> instead of manually specifying both <code>armv7</code> and <code>armv7s</code>.  Then, when running <code>pod install</code>, the <code>$(ARCHS_STANDARD_32_BIT)</code> is set for the Pods-* projects as well and everything is happy.</p>

<p><em>Note: the reason armv7 and armv7s architectures had been specified for the app is that there is a dependency on a library that does not yet support 64-bit architectures.  It looks like <code>$(ARCHS_STANDARD_32_BIT)</code> is a much better way to handle that situation.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Death of FlightPath and the Future of iOS Usage Statistics]]></title>
    <link href="http://www.overacker.me/blog/2014/02/09/in-app-events-for-usage-statistics/"/>
    <updated>2014-02-09T15:11:00-08:00</updated>
    <id>http://www.overacker.me/blog/2014/02/09/in-app-events-for-usage-statistics</id>
    <content type="html"><![CDATA[<p>As a longtime user of <a href="http://www.testflightapp.com">TestFlight</a> for both test build distribution and usage analytics, I was extremely disappointed to find that they have <a href="http://imgur.com/fcYo5dt">cancelled their FlightPath beta program</a> for tracking usage statistics in your live app once distributed via the App Store.  It was great to be able to reuse the same checkpoint infrastructure to collect usage statistics.  Alas, they claim to be focusing more on their core product, which might be a good thing in the end.</p>

<p>As a replacement, I have started working with <a href="http://www.flurry.com">Flurry</a>, which provides a great deal of usage statistics, including an event infrastructure similar to TestFlight&rsquo;s checkpoint system.</p>

<p>Make sure to sign up for a free account and copy your application key.  Let&rsquo;s get started!</p>

<!-- more -->


<h1>Setting Up Flurry</h1>

<p>The Flurry SDK is available as a CocoaPod, so installing is a snap if you&rsquo;re using <a href="http://www.cocoapods.org">CocoaPods</a>.  (If you&rsquo;re not, you really should be.  Check out <a href="../../../../2013/07/29/managing-project-dependencies-in-xcode-an-introduction-to-cocoapods/">this simple guide</a> I wrote to get started.)</p>

<p>Update your Podfile to include FlurrySDK:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod &ldquo;FlurrySDK&rdquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and run <code>pod install</code>.</p>

<p>Next, update your app delegate to start a Flurry session when the app finishes launching.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AppDelegate.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Flurry</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="c1">// Optionally enable crash reporting.</span>
</span><span class='line'> <span class="c1">// Note that you can&amp;rsquo;t have more than one crash reporting tool in your app.</span>
</span><span class='line'> <span class="p">[</span><span class="n">Flurry</span> <span class="nl">setCrashReportingEnabled:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'> <span class="c1">// Start sending data to Flurry.</span>
</span><span class='line'> <span class="p">[</span><span class="n">Flurry</span> <span class="nl">startSession:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">YOUR_KEY_HERE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'> <span class="c1">// &amp;hellip;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<h1>Tracking Usage with Events</h1>

<p>The event system provided by Flurry is similar to TestFlight&rsquo;s checkpoints, but includes a few unique and really nice features.  In TestFlight, events are limited to just a name, but with Flurry you can also associate a dictionary of parameters associated with the event, or cause the event to be timed.</p>

<p>The syntax for logging an event is similar to logging a checkpoint in TestFlight.</p>

<h3>Simple Event Logging</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SomeFile.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Event Logging With Parameters</h3>

<p>If you&rsquo;d like to associate some data with the event, there is another static method available.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SomeFile.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">eventParameters</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;};</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withParameters:</span><span class="n">eventParameters</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Timed Events</h3>

<p>You can time an event and have the duration be reported by Flurry&rsquo;s events dashboard.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SomeFile.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">timed:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="c1">// &amp;hellip;</span>
</span><span class='line'><span class="c1">// End the timed event, and optionally add or update parameters.</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">endTimedEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withParameters:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Timed Events with Parameters</h3>

<p>Lastly, you can combine all three.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SomeFile.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">eventParameters</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;};</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withParameters:</span><span class="n">eventParameters</span> <span class="nl">timed:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="c1">// &amp;hellip;</span>
</span><span class='line'><span class="c1">// End the timed event, and optionally add or update parameters.</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">endTimedEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withParameters:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Note that it can take a few hours for events to show up after your first session, and that unlike TestFlight, Flurry events are synchronized when the app is paused or terminated.</em></p>

<h1>Additional Features</h1>

<p>Flurry passively tracks a lot of other information about your app, too.  Some of the neat metrics you get for free are:</p>

<ul>
<li>Sessions</li>
<li>Active Users</li>
<li>New Users</li>
<li>Session Length</li>
<li>Frequency of Use</li>
<li>Benchmarks</li>
<li>User Retention</li>
<li>Version Adoption</li>
<li>and many more</li>
</ul>


<p>I plan to continue using TestFlight and Flurry side-by-side for a while, but may end up migrating completely to Flurry for events.  It certainly has more interesting and useful features than TestFlight&rsquo;s simple checkpoint logging.  If I end up using the two in parallel, I&rsquo;ll do a follow-up post on how to make that easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming An App on the App Store]]></title>
    <link href="http://www.overacker.me/blog/2013/11/05/app-store-app-rename/"/>
    <updated>2013-11-05T17:38:00-08:00</updated>
    <id>http://www.overacker.me/blog/2013/11/05/app-store-app-rename</id>
    <content type="html"><![CDATA[<p>Renaming an app on the iOS app store is a relatively simple thing to do.  The biggest point of confusion is that you cannot rename your app unless it is in an <em>editable state</em>.  You&rsquo;re probably going to want to change the display name for your app, so the easiest way to put your app in an editable state is to upload a new binary.</p>

<h1>Bundle Identifier</h1>

<p>If you want to rename your Xcode project to reflect the new app name, you won&rsquo;t want your bundle identifier to change along with the project name since this is the unique identifier for your app on the device.  By default, the bundle identifier includes <code>${PRODUCT_NAME}</code> or a variant thereof, e.g. <code>${PRODUCT_NAME:rfc1034identifier}</code>.  You won&rsquo;t want the Bundle Identifier to change when you rename your project, so the first thing you&rsquo;ll want to do is copy your Bundle Identifier from iTunes Connect and paste that in the Bundle Identifier field in the info.plist file for your app.</p>

<h1>Rename Project</h1>

<p>The fastest (and most thorough) way to rename your app is to simply rename the project in Xcode.  Slowly double-click on the project file in Xcode so that the name becomes editable and change the name.  After pressing enter, a dialog will pop up asking if you&rsquo;d like to rename project content items.  You probably want to keep all of these in sync, so choose Rename.</p>

<h1>Upload Binary</h1>

<p>Login to iTunes Connect and create a new version of your app.  When you edit the metadata for the new version of your app, you can now edit the name of the app.  Enter the new name for your app, create your new binary, and upload.  If you make it through the review process, your app will be ready to launch under a new name!  As long as you don&rsquo;t change the Bundle Identifier, existing users will receive the update.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Project Dependencies in Xcode: An Introduction to CocoaPods]]></title>
    <link href="http://www.overacker.me/blog/2013/07/29/managing-project-dependencies-in-xcode-an-introduction-to-cocoapods/"/>
    <updated>2013-07-29T00:00:00-07:00</updated>
    <id>http://www.overacker.me/blog/2013/07/29/managing-project-dependencies-in-xcode-an-introduction-to-cocoapods</id>
    <content type="html"><![CDATA[<p>The open-source community for iOS is amazing.  There are so many high-quality, incredibly useful open-source projects out there now that it would be crazy to work on an iOS project without bringing in at least a few open-source projects.  However, manually managing each of the libraries that you bring in can be tedious at best.  Most of them are hosted on <a href="http://github.com">GitHub</a>, which has improved a lot in the last few years to streamline the process.  With <a href="http://mac.github.com">GitHub for Mac</a>, it&rsquo;s easy to quickly clone a project straight from your browser, but you still have to move the appropriate files into <em>your</em> Xcode project.  And then you have to do it all again when the project is updated and you want to take advantage of the latest release.</p>

<p>It doesn&rsquo;t have to be this way.</p>

<!-- more -->


<h1>CocoaPods</h1>

<p><a href="http://cocoapods.org">CocoaPods</a> is the best way to manage library dependencies with Xcode.  It&rsquo;s still in the alpha phase, but it&rsquo;s continually being improved.  With CocoaPods, you can easily manage your project dependencies, even specifying the specific version number for each.  This is all tracked in a plaintext file, so you can keep this in your source repository and your whole team will automatically be in sync.  As an added bonus, you won&rsquo;t have to keep the projects in your source repository, so you can keep your repository&rsquo;s footprint small.</p>

<h1>Installation</h1>

<p>CocoaPods is distributed as a <a href="http://ruby-lang.org">Ruby</a> gem.  If you&rsquo;re new to Ruby, you should consider using an environment manager like <a href="http://www.overacker.me/blog/2013/07/10/getting-started-with-rbenv/">rbenv</a> to keep track of your Ruby environments.  It&rsquo;s not just for <a href="http://rubyonrails.org/">Rails</a>&mdash;more and more command line tools are being written in Ruby, and they often have specific Ruby version requirements.  I wrote a <a href="http://www.overacker.me/blog/2013/07/10/getting-started-with-rbenv/">simple guide</a> to getting started with rbenv that will have you up and running in no time.</p>

<p>If you don&rsquo;t have it already, install Ruby 2.0.0-p247.  CocoaPods will work in older versions, but I wouldn&rsquo;t go older than 1.9.3.  It&rsquo;s distributed as a gem, so installing is simple.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install cocoapods</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will download and install CocoaPods and its dependencies.  (Don&rsquo;t forget to <a href="https://github.com/sstephenson/rbenv#rbenv-rehash">rehash</a> if you&rsquo;re using rbenv.)</p>

<p>Now, perform the initial setup, which will create ~/.cocoapods, setup the initial podspec repos, <a href="https://github.com/CocoaPods/CocoaPods/blob/master/lib/cocoapods/command/setup.rb">and more</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod setup</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Installation is that simple.  You&rsquo;re ready to get started.</p>

<h1>Podfile</h1>

<p>Dependencies are tracked in a special plaintext file named Podfile.  You should create this file in the same directory as your Xcode project.  The first line of this file tells CocoaPods what platform your project is targeting (iOS or OS X), and the subsequent lines list the dependencies for your project.</p>

<p>E.g., a very simple iOS Podfile specifying the latest LastFm and TestFlightSDK frameworks:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios
</span><span class='line'>pod &lsquo;LastFm&rsquo;
</span><span class='line'>pod &lsquo;TestFlightSDK&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the platform is case sensitive.  If you want to specify the version for a pod, simply append the version number like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios
</span><span class='line'>pod &lsquo;LastFm&rsquo;
</span><span class='line'>pod &lsquo;TestFlightSDK&rsquo;, &lsquo;1.2.6&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can also prefix the version number with a <a href="http://docs.rubygems.org/read/chapter/16#page74">version constraint</a> to indicate a range of versions.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios
</span><span class='line'>pod &lsquo;LastFm&rsquo;
</span><span class='line'>pod &lsquo;TestFlightSDK&rsquo;, &lsquo;~> 1.2&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finding the pods you need for your project is simple thanks to the search function on the <a href="http://cocoapods.org/">CocoaPods site</a>.</p>

<h1>Workspace Generation</h1>

<p>Once your Podfile has been defined, the next step is to install the pods and generate the Xcode workspace.  This, too, is quite simple.  In the same directory as your Podfile, run the following command.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will download the pods and build a Xcode workspace that includes a Pods target in addition to your Xcode project.  Note that you need to use the .xcworkspace file generated by CocoaPods from now on when working with your project.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open YourProject.xcworkspace</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Whenever you add a new pod to your Podfile, just run <code>pod install</code> again to regenerate the workspace.</p>

<h1>Source Control</h1>

<p>I like to keep the pods out of my source code repositories.  You can update the ignore file for your source control repository to exclude the Pods/ directory created by CocoaPods.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.gitignore or .hgignore </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pods/</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I like to keep the <code>Podfile</code> and <code>Podfile.lock</code> files in source control so that it&rsquo;s easy to recreate the workspace using <code>pod install</code> after cloning the repository.</p>

<h1>More Info</h1>

<p>This is just the beginning of what CocoaPods can do.  Explore more of the advanced features&mdash;such as specifying pods for certain targets&mdash;in the <a href="http://docs.cocoapods.org/">CocoaPods documentation</a>.</p>
]]></content>
  </entry>
  
</feed>
