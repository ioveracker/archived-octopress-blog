<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Isaac Overacker]]></title>
  <link href="http://www.overacker.me/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://www.overacker.me/"/>
  <updated>2015-02-28T10:25:37-08:00</updated>
  <id>http://www.overacker.me/</id>
  <author>
    <name><![CDATA[Isaac Overacker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating an Xcode Plugin: A Quick-Start Guide]]></title>
    <link href="http://www.overacker.me/blog/2015/01/25/creating-an-xcode-plugin/"/>
    <updated>2015-01-25T14:19:00-08:00</updated>
    <id>http://www.overacker.me/blog/2015/01/25/creating-an-xcode-plugin</id>
    <content type="html"><![CDATA[<p>Xcode has a rich ecosystem of third-party plugins, exposed and cataloged by the wonderful <em>Xcode plugin</em> <a href="http://alcatraz.io/">Alcatraz</a>.  Some of my favorites: <a href="https://github.com/lucholaf/Auto-Importer-for-Xcode">Auto-Importer</a>, <a href="https://github.com/neonichu/BBUFullIssueNavigator">BBUFullIssueNavigator</a>, and <a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">FuzzyAutocomplete</a>.</p>

<p>However extensive the Xcode plugin catalog may be, there are surely other useful plugins to be written.  The process of writing a plugin is not very well documented, and frustratingly, much of the code required to interact with Xcode is still private.  However, thanks to the efforts of a few clever developers, getting started is much easier than it used to be.  Read on for a quick-start guide to creating an Xcode (5+) plugin.</p>

<!-- more -->


<h2>Prerequisites</h2>

<p>First, if you haven&rsquo;t already installed <a href="http://alcatraz.io/">Alcatraz</a>, do so now.  Once Alcatraz is installed and ready to use, install the Xcode Plugin template.</p>

<p><img class="<a" src="href="http://imgur.com/NAvepMc.png">http://imgur.com/NAvepMc.png</a>"></p>

<p>Once the Xcode Plugin template has been installed, create a new project and select the Xcode Plugin OS X template.  As much fun as it would be to get started, there&rsquo;s one last prerequisite to take care of.</p>

<p>Create a new Podfile (What&rsquo;s that?  Go <a href="../../../../2013/07/29/managing-project-dependencies-in-xcode-an-introduction-to-cocoapods/">here</a> first.) and install the <a href="https://github.com/thurn/DTXcodeUtils">DTXcodeUtils</a> pod.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source &lsquo;&lt;a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git&lt;/a>&rsquo;
</span><span class='line'>platform :osx&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>pod &lsquo;DTXcodeUtils&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After installing the pod, you&rsquo;ll be ready to get started writing your Xcode plugin.</p>

<h2>Creating a Plugin</h2>

<p>Open the workspace generated by Cocoapods, and then open the only .m file, which will be named the same as your project name.  <em>(Note: the build may fail with a linker error.  If this happens, edit your scheme, select Build, and add Pods to the top of <a href="http://i.imgur.com/PCUncdt.png">the list</a>.)</em>  You will see enough boilerplate code to hook your plugin into Xcode and show an alert window when your plugin is used.  I&rsquo;ve included the code sample below with the addition of some code to define a keyboard shortcut for the menu item.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">initWithBundle:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="n">plugin</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Reference to plugin&#39;s bundle, for resource access</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">bundle</span> <span class="o">=</span> <span class="n">plugin</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Sample menu item, nested under the &quot;Edit&quot; menu item.</span>
</span><span class='line'>    <span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">menuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSApp</span> <span class="n">mainMenu</span><span class="p">]</span> <span class="nl">itemWithTitle:</span><span class="s">@&quot;Edit&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">menuItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">menuItem</span> <span class="n">submenu</span><span class="p">]</span> <span class="nl">addItem:</span><span class="p">[</span><span class="n">NSMenuItem</span> <span class="n">separatorItem</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">NSMenuItem</span> <span class="o">*</span><span class="n">actionMenuItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Do Action&quot;</span>
</span><span class='line'>                                                                <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">doMenuAction</span><span class="p">)</span>
</span><span class='line'>                                                         <span class="nl">keyEquivalent:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setTarget:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// Set ⌃⌘X as our plugin&#39;s keyboard shortcut.</span>
</span><span class='line'>        <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setKeyEquivalent:</span><span class="s">@&quot;x&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">actionMenuItem</span> <span class="nl">setKeyEquivalentModifierMask:</span><span class="n">NSControlKeyMask</span> <span class="o">|</span> <span class="n">NSCommandKeyMask</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">menuItem</span> <span class="n">submenu</span><span class="p">]</span> <span class="nl">addItem:</span><span class="n">actionMenuItem</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doMenuAction</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSAlert</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAlert</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="nl">setMessageText:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">World</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">alert</span> <span class="n">runModal</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;ll probably want to rename your menu item, change your keyboard shortcut, and rename the <code>doMenuAction</code> method, but other than that, we have a great start on our plugin.  Run the project, and Xcode will bring up a <em>new Xcode window</em> with your plugin installed.  Don&rsquo;t confuse this new Xcode window with the Xcode window you used to launch the process.  Just test your plugin here and then close the window.</p>

<h3>Messing with Xcode</h3>

<p>A plugin that displays an alert is not very useful.  Any good plugin will do something with your code to save you time, and to do that, we need to access the code editor.  This is where the DTXcodeUtils library comes into play.  A simple but useful scenario is to replace the selected text in the code editor, so let&rsquo;s explore how to accomplish that with the methods that DTXcodeUtils exposes.</p>

<p>First, import a few of the useful headers from the DTXcodeUtils project.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">DTXcodeHeaders</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">DTXcodeUtils</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the <code>doMenuAction</code> method, we can now get the selected text from the code editor and replace it with something more&hellip;useful.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doMenuAction</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// This is a reference to the current source code editor.</span>
</span><span class='line'><span class="n">DVTSourceTextView</span> <span class="o">*</span><span class="n">sourceTextView</span> <span class="o">=</span> <span class="p">[</span><span class="n">DTXcodeUtils</span> <span class="n">currentSourceTextView</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Get the range of the selected text within the source code editor.</span>
</span><span class='line'><span class="n">NSRange</span> <span class="n">selectedTextRange</span> <span class="o">=</span> <span class="p">[</span><span class="n">sourceTextView</span> <span class="n">selectedRange</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Get the selected text using the range from above.</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">selectedString</span> <span class="o">=</span> <span class="p">[</span><span class="n">sourceTextView</span><span class="p">.</span><span class="n">textStorage</span><span class="p">.</span><span class="n">string</span> <span class="nl">substringWithRange:</span><span class="n">selectedTextRange</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">selectedString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Replace the selected string with a comment.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">sourceTextView</span> <span class="nl">replaceCharactersInRange:</span><span class="n">selectedTextRange</span> <span class="nl">withString:</span><span class="s">@&quot;// Malkovich Malkovich Malkovich&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, run the project.  In the resulting Xcode window, select some text and run the plugin. (<strong>Warning! This does not use the undo buffer, so be careful.</strong>)  If everything went smoothly, the text you selected should have been replaced with an inane comment.  Completely useless, I suppose, but it does demonstrate how to replace the selected text in the code editor!</p>

<h3>Installation and Removal</h3>

<p>Simply running your project will install the plugin, but if you want to install the plugin manually, you can drop the .xcplugin file in the following directory:</p>

<pre><code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins
</code></pre>

<p>Uninstalling a plug is a simple as removing the .xcplugin file from the above directory.  Once you have a great plugin to share with the world, submit your package to Alcatraz to make it simple for others to install your plugin.</p>

<h3>Sample Project</h3>

<p>The sample code for this post is available on <a href="https://github.com/ioveracker/XcodePluginGuide">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Death of FlightPath and the Future of iOS Usage Statistics]]></title>
    <link href="http://www.overacker.me/blog/2014/02/09/in-app-events-for-usage-statistics/"/>
    <updated>2014-02-09T15:11:00-08:00</updated>
    <id>http://www.overacker.me/blog/2014/02/09/in-app-events-for-usage-statistics</id>
    <content type="html"><![CDATA[<p>As a longtime user of <a href="http://www.testflightapp.com">TestFlight</a> for both test build distribution and usage analytics, I was extremely disappointed to find that they have <a href="http://imgur.com/fcYo5dt">cancelled their FlightPath beta program</a> for tracking usage statistics in your live app once distributed via the App Store.  It was great to be able to reuse the same checkpoint infrastructure to collect usage statistics.  Alas, they claim to be focusing more on their core product, which might be a good thing in the end.</p>

<p>As a replacement, I have started working with <a href="http://www.flurry.com">Flurry</a>, which provides a great deal of usage statistics, including an event infrastructure similar to TestFlight&rsquo;s checkpoint system.</p>

<p>Make sure to sign up for a free account and copy your application key.  Let&rsquo;s get started!</p>

<!-- more -->


<h1>Setting Up Flurry</h1>

<p>The Flurry SDK is available as a CocoaPod, so installing is a snap if you&rsquo;re using <a href="http://www.cocoapods.org">CocoaPods</a>.  (If you&rsquo;re not, you really should be.  Check out <a href="../../../../2013/07/29/managing-project-dependencies-in-xcode-an-introduction-to-cocoapods/">this simple guide</a> I wrote to get started.)</p>

<p>Update your Podfile to include FlurrySDK:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod &ldquo;FlurrySDK&rdquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and run <code>pod install</code>.</p>

<p>Next, update your app delegate to start a Flurry session when the app finishes launching.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AppDelegate.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Flurry</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="c1">// Optionally enable crash reporting.</span>
</span><span class='line'> <span class="c1">// Note that you can&amp;rsquo;t have more than one crash reporting tool in your app.</span>
</span><span class='line'> <span class="p">[</span><span class="n">Flurry</span> <span class="nl">setCrashReportingEnabled:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'> <span class="c1">// Start sending data to Flurry.</span>
</span><span class='line'> <span class="p">[</span><span class="n">Flurry</span> <span class="nl">startSession:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">YOUR_KEY_HERE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'> <span class="c1">// &amp;hellip;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<h1>Tracking Usage with Events</h1>

<p>The event system provided by Flurry is similar to TestFlight&rsquo;s checkpoints, but includes a few unique and really nice features.  In TestFlight, events are limited to just a name, but with Flurry you can also associate a dictionary of parameters associated with the event, or cause the event to be timed.</p>

<p>The syntax for logging an event is similar to logging a checkpoint in TestFlight.</p>

<h3>Simple Event Logging</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SomeFile.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Event Logging With Parameters</h3>

<p>If you&rsquo;d like to associate some data with the event, there is another static method available.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SomeFile.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">eventParameters</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;};</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withParameters:</span><span class="n">eventParameters</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Timed Events</h3>

<p>You can time an event and have the duration be reported by Flurry&rsquo;s events dashboard.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SomeFile.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">timed:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="c1">// &amp;hellip;</span>
</span><span class='line'><span class="c1">// End the timed event, and optionally add or update parameters.</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">endTimedEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withParameters:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Timed Events with Parameters</h3>

<p>Lastly, you can combine all three.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SomeFile.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">eventParameters</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;};</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withParameters:</span><span class="n">eventParameters</span> <span class="nl">timed:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="c1">// &amp;hellip;</span>
</span><span class='line'><span class="c1">// End the timed event, and optionally add or update parameters.</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">endTimedEvent:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SomeEventName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withParameters:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Note that it can take a few hours for events to show up after your first session, and that unlike TestFlight, Flurry events are synchronized when the app is paused or terminated.</em></p>

<h1>Additional Features</h1>

<p>Flurry passively tracks a lot of other information about your app, too.  Some of the neat metrics you get for free are:</p>

<ul>
<li>Sessions</li>
<li>Active Users</li>
<li>New Users</li>
<li>Session Length</li>
<li>Frequency of Use</li>
<li>Benchmarks</li>
<li>User Retention</li>
<li>Version Adoption</li>
<li>and many more</li>
</ul>


<p>I plan to continue using TestFlight and Flurry side-by-side for a while, but may end up migrating completely to Flurry for events.  It certainly has more interesting and useful features than TestFlight&rsquo;s simple checkpoint logging.  If I end up using the two in parallel, I&rsquo;ll do a follow-up post on how to make that easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Project Dependencies in Xcode: An Introduction to CocoaPods]]></title>
    <link href="http://www.overacker.me/blog/2013/07/29/managing-project-dependencies-in-xcode-an-introduction-to-cocoapods/"/>
    <updated>2013-07-29T00:00:00-07:00</updated>
    <id>http://www.overacker.me/blog/2013/07/29/managing-project-dependencies-in-xcode-an-introduction-to-cocoapods</id>
    <content type="html"><![CDATA[<p>The open-source community for iOS is amazing.  There are so many high-quality, incredibly useful open-source projects out there now that it would be crazy to work on an iOS project without bringing in at least a few open-source projects.  However, manually managing each of the libraries that you bring in can be tedious at best.  Most of them are hosted on <a href="http://github.com">GitHub</a>, which has improved a lot in the last few years to streamline the process.  With <a href="http://mac.github.com">GitHub for Mac</a>, it&rsquo;s easy to quickly clone a project straight from your browser, but you still have to move the appropriate files into <em>your</em> Xcode project.  And then you have to do it all again when the project is updated and you want to take advantage of the latest release.</p>

<p>It doesn&rsquo;t have to be this way.</p>

<!-- more -->


<h1>CocoaPods</h1>

<p><a href="http://cocoapods.org">CocoaPods</a> is the best way to manage library dependencies with Xcode.  It&rsquo;s still in the alpha phase, but it&rsquo;s continually being improved.  With CocoaPods, you can easily manage your project dependencies, even specifying the specific version number for each.  This is all tracked in a plaintext file, so you can keep this in your source repository and your whole team will automatically be in sync.  As an added bonus, you won&rsquo;t have to keep the projects in your source repository, so you can keep your repository&rsquo;s footprint small.</p>

<h1>Installation</h1>

<p>CocoaPods is distributed as a <a href="http://ruby-lang.org">Ruby</a> gem.  If you&rsquo;re new to Ruby, you should consider using an environment manager like <a href="http://www.overacker.me/blog/2013/07/10/getting-started-with-rbenv/">rbenv</a> to keep track of your Ruby environments.  It&rsquo;s not just for <a href="http://rubyonrails.org/">Rails</a>&mdash;more and more command line tools are being written in Ruby, and they often have specific Ruby version requirements.  I wrote a <a href="http://www.overacker.me/blog/2013/07/10/getting-started-with-rbenv/">simple guide</a> to getting started with rbenv that will have you up and running in no time.</p>

<p>If you don&rsquo;t have it already, install Ruby 2.0.0-p247.  CocoaPods will work in older versions, but I wouldn&rsquo;t go older than 1.9.3.  It&rsquo;s distributed as a gem, so installing is simple.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install cocoapods</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will download and install CocoaPods and its dependencies.  (Don&rsquo;t forget to <a href="https://github.com/sstephenson/rbenv#rbenv-rehash">rehash</a> if you&rsquo;re using rbenv.)</p>

<p>Now, perform the initial setup, which will create ~/.cocoapods, setup the initial podspec repos, <a href="https://github.com/CocoaPods/CocoaPods/blob/master/lib/cocoapods/command/setup.rb">and more</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod setup</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Installation is that simple.  You&rsquo;re ready to get started.</p>

<h1>Podfile</h1>

<p>Dependencies are tracked in a special plaintext file named Podfile.  You should create this file in the same directory as your Xcode project.  The first line of this file tells CocoaPods what platform your project is targeting (iOS or OS X), and the subsequent lines list the dependencies for your project.</p>

<p>E.g., a very simple iOS Podfile specifying the latest LastFm and TestFlightSDK frameworks:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios
</span><span class='line'>pod &lsquo;LastFm&rsquo;
</span><span class='line'>pod &lsquo;TestFlightSDK&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the platform is case sensitive.  If you want to specify the version for a pod, simply append the version number like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios
</span><span class='line'>pod &lsquo;LastFm&rsquo;
</span><span class='line'>pod &lsquo;TestFlightSDK&rsquo;, &lsquo;1.2.6&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can also prefix the version number with a <a href="http://docs.rubygems.org/read/chapter/16#page74">version constraint</a> to indicate a range of versions.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios
</span><span class='line'>pod &lsquo;LastFm&rsquo;
</span><span class='line'>pod &lsquo;TestFlightSDK&rsquo;, &lsquo;~> 1.2&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finding the pods you need for your project is simple thanks to the search function on the <a href="http://cocoapods.org/">CocoaPods site</a>.</p>

<h1>Workspace Generation</h1>

<p>Once your Podfile has been defined, the next step is to install the pods and generate the Xcode workspace.  This, too, is quite simple.  In the same directory as your Podfile, run the following command.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will download the pods and build a Xcode workspace that includes a Pods target in addition to your Xcode project.  Note that you need to use the .xcworkspace file generated by CocoaPods from now on when working with your project.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open YourProject.xcworkspace</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Whenever you add a new pod to your Podfile, just run <code>pod install</code> again to regenerate the workspace.</p>

<h1>Source Control</h1>

<p>I like to keep the pods out of my source code repositories.  You can update the ignore file for your source control repository to exclude the Pods/ directory created by CocoaPods.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.gitignore or .hgignore </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pods/</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I like to keep the <code>Podfile</code> and <code>Podfile.lock</code> files in source control so that it&rsquo;s easy to recreate the workspace using <code>pod install</code> after cloning the repository.</p>

<h1>More Info</h1>

<p>This is just the beginning of what CocoaPods can do.  Explore more of the advanced features&mdash;such as specifying pods for certain targets&mdash;in the <a href="http://docs.cocoapods.org/">CocoaPods documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Ruby Environments on OS X: Getting Started with rbenv]]></title>
    <link href="http://www.overacker.me/blog/2013/07/10/getting-started-with-rbenv/"/>
    <updated>2013-07-10T00:00:00-07:00</updated>
    <id>http://www.overacker.me/blog/2013/07/10/getting-started-with-rbenv</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve done any development on OS X, chances are you&rsquo;ve run into various apps and tools that require different versions of Ruby.  Manually installing and maintaining multiple versions of Ruby is a pain.  Fortunately, there are tools to make this process easier.  Rbenv is a lightweight, focused tool that helps you manage different versions of Ruby and switch between them as needed.  You can even set the specific Ruby version for your app to keep your team on the same page.</p>

<h1>Installation</h1>

<p>There are several paths to installing rbenv.  The simplest is to use <a href="http://mxcl.github.io/homebrew/">homebrew</a>.  (If you don&rsquo;t have homebrew, it&rsquo;s easy to install.  Go <a href="http://mxcl.github.io/homebrew/">here</a>.)</p>

<p>First, make sure your homebrew is up-to-date.</p>

<p><code>
brew update
</code></p>

<p>Then, install rbenv and ruby-build.</p>

<p><code>
brew install rbenv
brew install ruby-build
</code></p>

<p>Once it is done installing, you need to update your profile.  This is generally ~/.bash_profile.  Open it in your favorite editor, and add the following line.</p>

<p><code>
eval "$(rbenv init -)"
</code></p>

<p>Now execute that in your current bash session by using <code>source</code>.</p>

<p><code>
source ~/.bash_profile
</code>
Rbenv will be setup and ready to use.</p>

<h1>rbenv Basics</h1>

<p>The only installation of Ruby that you will have in rbenv at this point is the system version.  If you type the following command, it will show you what versions are installed.</p>

<p><code>
rbenv versions
</code></p>

<p>This will show an asterisk next to the version rbenv is currently using.  To install a new version of Ruby, use the <code>rbenv install</code> command.  For example, to install Ruby 2.0.0-p247:</p>

<p><code>
rbenv install 2.0.0-p247
rbenv rehash
</code></p>

<p>This will install version 2.0.0-p247 under ~/.rbenv/versions/.  The <code>rehash</code> command tells rbenv about the new executables.  You should use this command any time you install a new version of Ruby or install a gem that includes commands.  (You can read about the rehashing process <a href="https://github.com/sstephenson/rbenv#understanding-shims">here</a>.)  You can use this version globally by using the <code>global</code> command:</p>

<p><code>
rbenv global 2.0.0-p247
</code></p>

<p>Or, if you&rsquo;d like to specify that this version should be used in a specific directory, use the <code>local</code> command:</p>

<p><code>
rbenv local 2.0.0-p247
</code></p>

<p>This will create a file named .ruby-version in the current directory that states the version of Ruby to use while in this directory.  Rbenv looks for this file when you use Ruby commands.  This provides the ability to ensure everyone on your team is using the same version of Ruby when developing your app.</p>

<p>That&rsquo;s it, you&rsquo;re up and running with rbenv!  For additional details and advanced features of rbenv, check out the official <a href="https://github.com/sstephenson/rbenv">GitHub repository</a>.</p>
]]></content>
  </entry>
  
</feed>
